<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- DB 접속 정보를 저장하는 객체 생성 -->
	<beans:bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver"></beans:property>
		<beans:property name="url"
			value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		<beans:property name="username" value="spring" />
		<beans:property name="password" value="1234" />
	</beans:bean>
	<!-- Mybatis 설정 객체 -->
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<beans:property name="mapperLocations"
			value="classpath:/mapper/*SQL.xml" />
	</beans:bean>
	<!-- DB작업을 수행하는 객체 -->
	<beans:bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSession" />
	</beans:bean>
	<!-- JDBCTemplate -->
	<!-- <beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<beans:property name="dataSource" ref="dataSource"/> </beans:bean> -->
	<!-- 파일업로드용 객체 생성 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760" /> <!-- 10MB -->
	</beans:bean>
	<!-- Transaction 관리 객체-->
	<beans:bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	<!-- Transactional 어노테이션사용을 위한 설정 -->
	<tx:annotation-driven/>
	<!-- email 인증 관련   -->
    <bean id="mailSender" class="Ja">
        <property name="host" value="email" />
        <property name="port" value="587" />
        <property name="username" value="이메일 주소"/>
        <property name="password" value="비밀번호" />
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>
	<!--  
	<beans:bean id="logAdvice1" class="kr.or.common.LogAdvice1"></beans:bean>
	<beans:bean id="logAdvice2" class="kr.or.common.LogAdvice2"></beans:bean>
	<beans:bean id="bt" class="kr.or.common.BeforeAdvice"></beans:bean>
	<beans:bean id="at"
		class="kr.or.common.AfterReturningAdvice"></beans:bean>


	<aop:config>
		<aop:pointcut
			expression="execution(* kr.or.member.model.service.MemberService.*(..))"
			id="allPointcut" />
		<aop:pointcut
			expression="execution(* kr.or.member.model.service.MemberService.selectOneMember(..))"
			id="selectOne" />

		<aop:aspect ref="bt">
			<aop:before method="beforeTest" pointcut-ref="allPointcut" />
		</aop:aspect>

		<aop:aspect ref="ar">
			<aop:before method="afterReturn" pointcut-ref="selectAll" />
		</aop:aspect>

		<aop:aspect ref="around">
			<aop:before method="AroundAdvice" pointcut-ref="selectAll" />
		</aop:aspect>
	</aop:config>
-->
	<context:component-scan base-package="kr.or.iei" />
	<context:component-scan base-package="kr.or.member" />
	<context:component-scan base-package="kr.or.board" />
	<context:component-scan base-package="common" />
	<context:component-scan base-package="kr.or.common" />



</beans:beans>
